// import type { Metadata } from "next";
// import localFont from "next/font/local";
// import "./globals.css";
// import Navbar from "./components/Navbar";
// import Footer from "./components/Footer";
// import { ClerkProvider} from "@clerk/nextjs"

// const geistSans = localFont({
//   src: "./fonts/GeistVF.woff",
//   variable: "--font-geist-sans",
//   weight: "100 900",
// });
// const geistMono = localFont({
//   src: "./fonts/GeistMonoVF.woff",
//   variable: "--font-geist-mono",
//   weight: "100 900",
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <ClerkProvider>
//     <html lang="en">
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >
//         <Navbar/>
//         {children}
//         <Footer/>
//       </body>
//     </html>
//     </ClerkProvider>
//   );
// }







"use client"; 

import { Inter } from "next/font/google";
import "./globals.css";
import Footer from "./components/Footer";
import { ClerkProvider } from "@clerk/nextjs";
import { Toaster } from "react-hot-toast";
import Loading from "./loading";
import { useState, useEffect } from "react"; // Import useState and useEffect
import Navbar from "./components/Navbar";

const inter = Inter({ subsets: ["latin"] });



export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [isLoading, setIsLoading] = useState(true); // Manage isLoading state

  useEffect(() => {
    setIsLoading(true); // Set isLoading to true initially
    const timer = setTimeout(() => {
      setIsLoading(false); // Set it to false after 2 seconds
    }, 2000);
    
    return () => clearTimeout(timer); // Clean up the timeout on unmount
  }, []);

  const studioAndHome = true; // Define studioAndHome variable

  return (
    <ClerkProvider>
      <html lang="en">
        <body className={`${inter.className} antialiased`}>
          <Toaster />
          {(studioAndHome && !isLoading) && <Navbar />}
          {isLoading ? <Loading /> : children}
          {(studioAndHome && !isLoading) && <Footer />}
        </body>
      </html>
    </ClerkProvider>
  );
}